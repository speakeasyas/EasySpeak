@using System.Security.Claims
@model EasySpeak.Models.ChatRoom

@{
    ViewData["Title"] = Model.Name;
}
<style>
 /* تعريف شريط التمرير العمودي */
    #chatMessages {
        max-height: 300px; /* ارتفاع أقصى لعرض الرسائل */
        overflow-y: auto; /* إضافة شريط تمرير عمودي في حالة الحاجة */
    }

   

    .input-group-append {
        display: flex;
        align-items: center;
    }

    .input-group-append button {
        margin-left: 5px;
    }
    /* تحسين تنسيق الرسائل */
    .message {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 10px;
        background-color: #f0f0f0;
        max-width: 70%; /* حدود أقصى لعرض الرسالة */
    }

        .message .user {
            font-weight: bold;
            margin-right: 5px;
        }

        .message .timestamp {
            font-size: 12px;
            color: #888;
        }
   /* تنسيقات لشريط جانبي لعرض المستخدمين */
.sidebar {
    position: absolute; /* استخدم absolute بدلاً من fixed */
    top: 70px; /* تعديل قيمة top لتكون تحت الشريط العلوي */
    right: 0;
    height: calc(100% - 150px); /* ضبط الارتفاع ليكون أسفل الشريط العلوي */
    width: 250px; /* عرض الشريط الجانبي */
    background-color: #f8f9fa; /* لون خلفية خفيف */
    border-left: 1px solid #ddd; /* خط فاصل جانبي */
    padding: 20px;
    overflow-y: auto; /* إضافة شريط تمرير عمودي */
}

  

    .sidebar-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 15px;
    }

    .user-list {
        list-style-type: none;
        padding: 0;
    }

    .user-list-item {
        margin-bottom: 5px;
    }

    .connected {
        color: green; /* لون مميز للمستخدمين المتصلين */
    }

    .disconnected {
        color: red; /* لون مميز للمستخدمين غير المتصلين */
    }
    #messageForm{
        margin-top: 10px;
        width: calc(100% - 270px);
    }
    /* messageInputContainer.css */

    .message-input-container {
        display: flex;
        background-color: #f0f0f0;
        border-radius: 10px;
        padding: 10px;
        width: 100%;
    }

    .message-input {
        flex-grow: 1;
        border: none;
        font-size: 16px;
        padding: 5px;
        outline: none;
    }

    .input-buttons {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .emoji-button, .mic-button, .send-button {
        background-color: #e0e0e0;
        border: none;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 5px;
        transition: background-color 0.2s ease;
    }

        .emoji-button:hover, .mic-button:hover, .send-button:hover {
            background-color: #d0d0d0;
        }

        .emoji-button i, .mic-button i, .send-button i {
            font-size: 18px;
        }

    .private-chat-window {
        position: fixed;
        bottom: 0;
        right: 20px;
        width: 300px;
        background-color: white;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        z-index: 1000;
    }

    .private-chat-header {
        padding: 10px;
        background-color: #f0f0f0;
        border-bottom: 1px solid #ccc;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
    }

    .chat-messages {
        max-height: 200px;
        overflow-y: auto;
        padding: 10px;
    }

    .message-input-container {
        display: flex;
        padding: 10px;
        background-color: #f0f0f0;
        border-top: 1px solid #ccc;
    }

    .message-input {
        flex-grow: 1;
        border: none;
        padding: 5px;
        outline: none;
    }

    .input-buttons {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .emoji-button, .mic-button, .send-button {
        background-color: #e0e0e0;
        border: none;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 5px;
        transition: background-color 0.2s ease;
    }

        .emoji-button:hover, .mic-button:hover, .send-button:hover {
            background-color: #d0d0d0;
        }

    #privateChatWindow {
        position: fixed;
        bottom: 0;
        right: 0;
        width: 300px;
        height: 400px;
        border: 1px solid #ccc;
        background-color: #fff;
        overflow-y: auto;
        display: none; /* إخفاء النافذة في البداية */
    }

    .message {
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

        .message .user {
            font-weight: bold;
        }

    #privateChatWindow {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 300px;
        height: 400px;
        border: 1px solid #ccc;
        background-color: #fff;
        z-index: 1000; /* للتأكد من أن النافذة تظهر فوق العناصر الأخرى */
        display: none; /* تبقى مخفية حتى يتم استدعاؤها */
    }

    .message-header, .private-message-header {
        display: flex;
        align-items: center;
    }

    .profile-picture {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        margin-right: 10px;
        object-fit:cover;
    }

    .username {
        font-weight: bold;
    }

    .message-body, .private-message-body {
        margin-left: 60px;
    }

    .sidebar-button {
        position: absolute; /* يجعل الزر يوضع بشكل مطلق داخل الشريط الجانبي */
        bottom: 20px; /* يضع الزر على بعد 20 بكسل من أسفل الشريط الجانبي */
        left: 0; /* يضع الزر على حافة اليسار للشريط الجانبي */
        width: 100%; /* يجعل عرض الزر مساويًا لعرض الشريط الجانبي */
        padding: 10px; /* إضافة مسافة داخلية حول الزر */
        text-align: center; /* تسهيل محاذاة النص في الوسط */
        background-color: #007bff; /* لون خلفية أزرق */
        color: #fff; /* لون نص أبيض */
        cursor: pointer; /* تغيير المؤشر إلى يد عند تحريك الماوس فوق الزر */
    }

    #emojiContainer {
        margin-top: 10px;
        border: 1px solid #ccc;
        padding: 10px;
        background: #fff;
        border-radius: 5px;
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .emoji {
        cursor: pointer;
        font-size: 24px;
    }

    .user-profile-image {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        margin-right: 10px;
        object-fit:cover;
    }

    .start-private-chat:hover {
        text-decoration: underline; /* إضافة خط تحت النص عند التمرير */
    }
</style>

<h2>@Model.Name</h2>
<input type="hidden" id="currentUserId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)" />

<!-- شريط جانبي لعرض المستخدمين -->
<div class="sidebar">
    <h3 class="sidebar-title">المستخدمين المتواجدين</h3>
    <ul class="user-list">
   
    </ul>

    <form id="leaveRoomForm" method="post">
        <input type="hidden" id="currentRoomId1" value="@Model.Id" />
        <button type="button" class="btn btn-secondary sidebar-button" id="leaveRoomButton">Leave Room</button>
    </form>

</div>


<div id="privateChatWindow" class="private-chat-window">
    <div class="private-chat-header">
        <span id="privateChatUserName"></span>
        <button id="closePrivateChat" class="close-button">&times;</button>
    </div>
    <div id="privateChatMessages" class="chat-messages"></div>
    <form id="privateMessageForm" method="post" enctype="multipart/form-data">
        <input type="hidden" id="privateRoomId" name="roomId" />
        <div class="message-input-container">
            <input type="text" class="message-input" id="privateMessageInput" name="messageContent" placeholder="اكتب رسالة..." maxlength="250">
            <div class="input-buttons">
                <button type="button" class="mic-button" id="pmicButton"><i class="fas fa-microphone"></i></button>
                <button type="button" class="file-button" id="pfileButton"><i class="fas fa-paperclip"></i></button>
                <button type="submit" class="send-button" id="privateSendButton"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
    </form>
</div>


<div class="container mt-4">
    <div id="chatMessages">
        @foreach (var message in Model.Messages)
        {
            <div class="message">
                <div class="message-header">
                    <img src="~/images/Profiles/@message.User.ProfilePicture" alt="@message.User.Name's Profile Picture" class="profile-picture" />
                    <span class="user">@message.User.Name:</span>
                </div>
                <div class="message-body">
                    @if(message.Content=="" && message.FilePath!=null)
                    {
                        var s = message.FilePath.Substring(9);
                        <span><a href="@message.FilePath" target="_blank">@s</a></span>
                        <small class="timestamp">(@message.Timestamp)</small>
                    }
                    else
                    {
                        <span>@message.Content</span>
                        <small class="timestamp">(@message.Timestamp)</small>
                    }
                    
                </div>
            </div>
        }
    </div>
    <form id="messageForm" asp-action="SendMessage" asp-controller="Chat" method="post" enctype="multipart/form-data">
        <input type="hidden" id="currentRoomId" name="roomId" value="@Model.Id" />
        <div class="message-input-container">
            <input type="text" class="message-input" id="messageInput" name="messageContent" placeholder="اكتب رسالة..." maxlength="250" >
            <div class="input-buttons">
                <button type="button" class="emoji-button" id="emojiButton"><i class="fas fa-smile"></i></button>
                <button type="button" class="mic-button" id="micButton"><i class="fas fa-microphone"></i></button>
                <input type="file" id="fileInput" style="display:none;" />
                <button type="button" class="file-button" id="fileButton"><i class="fas fa-paperclip"></i></button>
                <button type="submit" class="send-button" id="sendButton"><i class="fas fa-paper-plane"></i></button>
            </div>
        </div>
        <div id="emojiContainer" style="display: none;">
            <span class="emoji">😀</span>
            <span class="emoji">😁</span>
            <span class="emoji">😂</span>
            <span class="emoji">🤣</span>
            <span class="emoji">😃</span>
            <span class="emoji">😄</span>
            <span class="emoji">😅</span>
            <span class="emoji">😆</span>
            <span class="emoji">😉</span>
            <span class="emoji">😊</span>
        </div>
    </form>


  
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.7/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script src="~/js/chat2.js" asp-append-version="true"></script>
    <!-- JavaScript لجعل زر Enter يرسل الرسالة -->
    <script>
        
       
        
        // دالة لبدء التعرف على الكلام
        function startSpeechRecognition() {
            const recognition = new webkitSpeechRecognition() || new SpeechRecognition();

            recognition.lang = 'ar'; // تعيين لغة التعرف إلى العربية

            recognition.onresult = function (event) {
                const messageInput = document.getElementById('messageInput');
                messageInput.value = event.results[0][0].transcript;
                messageInput.focus(); // تفعيل مربع الادخال بعد التعرف على الكلام
                // const message2 = $('#messageInput').data("emojioneArea").setText(event.results[0][0].transcript);

            }

            recognition.start();
        }
        function startSpeechRecognition2() {
            const recognition = new webkitSpeechRecognition() || new SpeechRecognition();

            recognition.lang = 'ar'; // تعيين لغة التعرف إلى العربية

            recognition.onresult = function (event) {
                const messageInput = document.getElementById('privateMessageInput');
                messageInput.value = event.results[0][0].transcript;
                messageInput.focus(); // تفعيل مربع الادخال بعد التعرف على الكلام

            }

            recognition.start();
        }
        // استدعاء الدالة عند النقر على زر الميكروفون
        document.getElementById('micButton').addEventListener('click', startSpeechRecognition);
        //-----------------------

        document.getElementById('pmicButton').addEventListener('click', startSpeechRecognition2);

       


        // document.getElementById("messageForm").addEventListener("submit", (event) => {
        //     event.preventDefault();
        //     const user = '@User.Identity.Name';
        //     const message = document.getElementById("messageInput").value;
        //     const roomId = document.getElementById("currentRoomId").value;
        //     connection.invoke("SendMessage", user, message, roomId).catch(err => console.error(err.toString()));
        //     document.getElementById("messageInput").value = "";
        // });


        document.getElementById("fileButton").addEventListener("click", function () {
            document.getElementById("fileInput").click();
        });

        document.getElementById("fileInput").addEventListener("change", function () {
            const file = this.files[0];
            if (file) {
                sendFile(file);
            }
        });
        function sendFile(file) {
            const formData = new FormData();
            formData.append("file", file);
            formData.append("roomId", document.getElementById("currentRoomId").value);

            fetch('/Chat/SendFile', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            }).then(response => {
                if (response.ok) {
                    console.log('File sent successfully');
                } else {
                    console.error('Failed to send file:', response.statusText);
                }
            }).catch(err => console.error('Fetch error:', err));
        }



        $(document).ready(function () {
            $("#emojiButton").click(function () {
                $("#emojiContainer").toggle();
            });

            $(".emoji").click(function () {
                var emoji = $(this).text();
                var messageInput = $("#messageInput");
                messageInput.val(messageInput.val() + emoji);
                $("#emojiContainer").hide();
            });

            $(document).click(function (event) {
                if (!$(event.target).closest("#emojiButton, #emojiContainer").length) {
                    $("#emojiContainer").hide();
                }
            });
        });
            </script>
}
